; Welcome to a specific type of assembly.
; This language is called "M68K"
; It's an 8-bit microprocessor architecture, widely used in the late 1990s and early 2000s for embedded systems.
; The M68000 series processors are known as "classic" M68k chips.
; They were popular because they had a lot of features that made them easy to program.
; However, they also have some limitations: no floating point support, limited memory addressing modes.

; --------------------------------------------------------------------------------------------------------------

ORG  $1000                     ; Start at 4096 (decimal) = 1024 (hexadecimal).

start:   MOVEA.L #$12345678, D0    ; Move the value 0x12345678 into register D0.
         MOVEA.L D0, A0            ; Copy the contents of D0 into A0.
         ADDQ.L  #1, D0             ; Add one to the value in D0 and store it back in D0.
         SUBQ.B  #2, D0             ; Subtract two from the value in D0 and store it back in D0.
         LEA     label, A1           ; Load the address of 'label' into A1.
         BRA     start               ; Jump to the beginning of the code again.

label:  DC.W   0x1234              ; Data constant - this will be stored in memory.
        DC.L   0xa1b2c3d4          ; Long data constant - this will also be stored in memory.

END      ORG $FFFE                ; End the program here.

; --------------------------------------------------------------------------------------------------------------

; Now this is a lot of code. Lets break it down!

; --------------------------------------------------------------------------------------------------------------

;  START:

;  MOVEA.L #$12345678, D0 moves the number 0x12345678 into the D-register D0.
;  It does this by loading an immediate value into D0.
;  A register is a special kind of variable that can hold values directly inside the processor.
;  In this case, D0 holds a 32 bit quantity.
;  D0 can also be used to add a value to the TRAP #15 Function.
;  So if you ever see something like TRAP #15/D0, it means that whatever follows is going to use the value in D0.

;  ADDQ.L #1, D0 adds one to the current value of D0 and stores the result back in the register D0.

;  SUBQ.B #2, D0 subtracts two from the current value of D0 and stores the result back in D0.
;  Note that only the lower byte of D0 was affected by this operation.
;  Data is stored in either:
;    * bytes (SUB/CMP/TST/NE/EQ etc.)
;    * words (ADD/ADDA/SUBA/SCC etc.)
;    * longwords (MOVEL/MOVEP etc.) (longwords can also be called longs)

;  LEA label, A1 loads the address of where 'label' starts into the A-register A1.
;  This allows you to use labels as pointers to other parts of your program.
;  A pointer is a variable that contains the location of something else in memory.

;  BRA start jumps to the location specified by the label 'start'.
;  This means that execution will begin executing code starting at the label 'start',
;  which in turn leads us back to the beginning of our loop.
;
;  -------------------------------------------------------------------------------------------------------------

; LABEL:

;  DC.W $1234 is a word (two bytes) constant. The hexadecimal number following '$'
;  indicates that the constant should be interpreted as a decimal number.
;  So $1234 is equivalent to 0x1234 = 4660.

;   JMP Label jumps to the location specified by the label 'Label'.
;   This is essentially just a copy of BRA Label, but with a different name, "jump".

; END:

;   JMP END jumps to the end of the loop, so effectively ends the program.
